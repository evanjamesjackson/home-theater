services:
  plex:
    container_name: plex
    image: linuxserver/plex
    restart: unless-stopped
    networks:
      - internal_network
    ports:
      - "${PLEX_PORT}:32400"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - plex_config:/config
      - plex_transcode:/transcode
      - ${MEDIA_ROOT}/complete:/data

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr
    restart: unless-stopped
    networks:
      - nginx_proxy_network
      - internal_network
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # nginx-proxy variables
      - VIRTUAL_HOST=${SONARR_HOSTNAME}
      - LETSENCRYPT_HOST=${SONARR_HOSTNAME}
      - VIRTUAL_PORT=8989
    volumes:
      - sonarr_config:/config
      - ${MEDIA_ROOT}/complete/tv:/tv
      - ${MEDIA_ROOT}/downloads:/downloads
      - /etc/localtime:/etc/localtime:ro

  radarr:
    container_name: radarr
    image: linuxserver/radarr
    restart: unless-stopped
    networks:
      - nginx_proxy_network
      - internal_network
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # nginx-proxy variables
      - VIRTUAL_HOST=${RADARR_HOSTNAME}
      - LETSENCRYPT_HOST=${RADARR_HOSTNAME}
      - VIRTUAL_PORT=7878
    volumes:
      - radarr_config:/config
      - ${MEDIA_ROOT}/complete/movies:/movies
      - ${MEDIA_ROOT}/downloads:/downloads
      - /etc/localtime:/etc/localtime:ro

  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr
    restart: always
    networks:
      - internal_network
    ports:
      - "${PROWLARR_PORT}:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - prowlarr_config:/config

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: always
    networks:
      - internal_network
    ports:
      - "${BAZARR_PORT}:6767"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - bazarr_config:/config
      - ${MEDIA_ROOT}/complete/movies:/movies
      - ${MEDIA_ROOT}/complete/tv:/tv

  qbittorrent:
    container_name: qbittorrent
    # There is currently an issue that prevents the latest-tagged image from working with gluetun: https://github.com/qdm12/gluetun/discussions/1562
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    restart: unless-stopped
    depends_on:
      - qbittorrent-vpn
    # Place this container inside the VPN container's network so that all traffic is routed through it
    network_mode: "service:qbittorrent-vpn"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=${QBITTORRENT_PORT}
    volumes:
      - qbittorrent_config:/config
      - ${MEDIA_ROOT}/downloads:/downloads

  # Stolen from https://github.com/qdm12/gluetun/discussions/1562#discussioncomment-9758565
  qbittorrent-restarter:
    container_name: qbittorrent-restarter
    image: docker:cli
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    # Restart the qBitTorrent container every 10 minutes
    command: ["/bin/sh", "-ex", "-c", "while true; do sleep 600; echo restarting; docker restart qbittorrent; done"]
    restart: unless-stopped
    depends_on:
      - qbittorrent

  qbittorrent-vpn:
    container_name: qbittorrent-vpn
    image: qmcgaw/gluetun
    restart: unless-stopped
    networks:
      - internal_network
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      # Open the qBittorrent WebUI port
      - "${QBITTORRENT_PORT}:${QBITTORRENT_PORT}"
    environment:
      - VPN_SERVICE_PROVIDER=custom
      - VPN_TYPE=wireguard
      - TZ=${TZ}
    volumes:
      - ./wg0.conf:/gluetun/wireguard/wg0.conf

volumes:
  plex_config:
  plex_transcode:
  sonarr_config:
  radarr_config:
  prowlarr_config:
  bazarr_config:
  qbittorrent_config:

networks:
  internal_network:
  nginx_proxy_network:
    name: ${NGINX_PROXY_NETWORK}
    external: true
